model User {
  id                    String                 @id @default(cuid())
  name                  String
  username              String?                @unique @db.VarChar(255)
  email                 String                 @unique @db.VarChar(255)
  emailVerified         DateTime?
  image                 String?                @db.VarChar(500)
  bio                   String?                @db.VarChar(500)
  password              String?                @db.VarChar(255)
  role                  UserRole               @default(USER)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  posts                 Post[]
  following             Follow[]               @relation("Following")
  followedBy            Follow[]               @relation("FollowedBy")
  blocking              Block[]                @relation("Blocking")
  blockedBy             Block[]                @relation("BlockedBy")
  ReportContent         ReportContent[]
  Like                  Like[]
  SavedPost             SavedPost[]
  conversations         UserConversation[]
  seenMessages          Message[]              @relation("Seen")
  messages              Message[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
